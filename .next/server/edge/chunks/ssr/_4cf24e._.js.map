{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/utils/supabase/middleware.ts"],"sourcesContent":["import { createServerClient, type CookieOptions } from '@supabase/ssr';\nimport { type NextRequest, NextResponse } from 'next/server';\n\nexport const createClient = (request: NextRequest) => {\n  // Create an unmodified response\n  let response = NextResponse.next({\n    request: {\n      headers: request.headers\n    }\n  });\n\n  const supabase = createServerClient(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n    {\n      cookies: {\n        get(name: string) {\n          return request.cookies.get(name)?.value;\n        },\n        set(name: string, value: string, options: CookieOptions) {\n          // If the cookie is updated, update the cookies for the request and response\n          request.cookies.set({\n            name,\n            value,\n            ...options\n          });\n          response = NextResponse.next({\n            request: {\n              headers: request.headers\n            }\n          });\n          response.cookies.set({\n            name,\n            value,\n            ...options\n          });\n        },\n        remove(name: string, options: CookieOptions) {\n          // If the cookie is removed, update the cookies for the request and response\n          request.cookies.set({\n            name,\n            value: '',\n            ...options\n          });\n          response = NextResponse.next({\n            request: {\n              headers: request.headers\n            }\n          });\n          response.cookies.set({\n            name,\n            value: '',\n            ...options\n          });\n        }\n      }\n    }\n  );\n\n  return { supabase, response };\n};\n\nexport const updateSession = async (request: NextRequest) => {\n  try {\n    // This `try/catch` block is only here for the interactive tutorial.\n    // Feel free to remove once you have Supabase connected.\n    const { supabase, response } = createClient(request);\n\n    // This will refresh session if expired - required for Server Components\n    // https://supabase.com/docs/guides/auth/server-side/nextjs\n    await supabase.auth.getUser();\n\n    return response;\n  } catch (e) {\n    // If you are here, a Supabase client could not be created!\n    // This is likely because you have not set up environment variables.\n    // Check out http://localhost:3000 for Next Steps.\n    return NextResponse.next({\n      request: {\n        headers: request.headers\n      }\n    });\n  }\n};"],"names":[],"mappings":";;;;;;;;;;;AAGO,MAAM,eAAe,CAAC;IAC3B,gCAAgC;IAChC,IAAI,WAAW,qLAAA,CAAA,eAAY,CAAC,IAAI,CAAC;QAC/B,SAAS;YACP,SAAS,QAAQ,OAAO;QAC1B;IACF;IAEA,MAAM,WAAW,CAAA,GAAA,mKAAA,CAAA,qBAAkB,AAAD,sUAGhC;QACE,SAAS;YACP,KAAI,IAAY;gBACd,OAAO,QAAQ,OAAO,CAAC,GAAG,CAAC,OAAO;YACpC;YACA,KAAI,IAAY,EAAE,KAAa,EAAE,OAAsB;gBACrD,4EAA4E;gBAC5E,QAAQ,OAAO,CAAC,GAAG,CAAC;oBAClB;oBACA;oBACA,GAAG,OAAO;gBACZ;gBACA,WAAW,qLAAA,CAAA,eAAY,CAAC,IAAI,CAAC;oBAC3B,SAAS;wBACP,SAAS,QAAQ,OAAO;oBAC1B;gBACF;gBACA,SAAS,OAAO,CAAC,GAAG,CAAC;oBACnB;oBACA;oBACA,GAAG,OAAO;gBACZ;YACF;YACA,QAAO,IAAY,EAAE,OAAsB;gBACzC,4EAA4E;gBAC5E,QAAQ,OAAO,CAAC,GAAG,CAAC;oBAClB;oBACA,OAAO;oBACP,GAAG,OAAO;gBACZ;gBACA,WAAW,qLAAA,CAAA,eAAY,CAAC,IAAI,CAAC;oBAC3B,SAAS;wBACP,SAAS,QAAQ,OAAO;oBAC1B;gBACF;gBACA,SAAS,OAAO,CAAC,GAAG,CAAC;oBACnB;oBACA,OAAO;oBACP,GAAG,OAAO;gBACZ;YACF;QACF;IACF;IAGF,OAAO;QAAE;QAAU;IAAS;AAC9B;AAEO,MAAM,gBAAgB,OAAO;IAClC,IAAI;QACF,oEAAoE;QACpE,wDAAwD;QACxD,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE,GAAG,aAAa;QAE5C,wEAAwE;QACxE,2DAA2D;QAC3D,MAAM,SAAS,IAAI,CAAC,OAAO;QAE3B,OAAO;IACT,EAAE,OAAO,GAAG;QACV,2DAA2D;QAC3D,oEAAoE;QACpE,kDAAkD;QAClD,OAAO,qLAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;gBACP,SAAS,QAAQ,OAAO;YAC1B;QACF;IACF;AACF"}},
    {"offset": {"line": 91, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 96, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/middleware.ts"],"sourcesContent":["import { type NextRequest } from 'next/server'\nimport { updateSession } from '@/utils/supabase/middleware'\n\nexport async function middleware(request: NextRequest) {\n  // update user's auth session\n  return await updateSession(request)\n}\n\nexport const config = {\n  matcher: [\n    /*\n     * Match all request paths except for the ones starting with:\n     * - _next/static (static files)\n     * - _next/image (image optimization files)\n     * - favicon.ico (favicon file)\n     * Feel free to modify this pattern to include more paths.\n     */\n    '/((?!_next/static|_next/image|favicon.ico|.*\\\\.(?:svg|png|jpg|jpeg|gif|webp)$).*)',\n  ],\n}"],"names":[],"mappings":";;;;;;;AAGO,eAAe,WAAW,OAAoB;IACnD,6BAA6B;IAC7B,OAAO,MAAM,CAAA,GAAA,+HAAA,CAAA,gBAAa,AAAD,EAAE;AAC7B;AAEO,MAAM,SAAS;IACpB,SAAS;QACP;;;;;;KAMC,GACD;KACD;AACH"}},
    {"offset": {"line": 118, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}